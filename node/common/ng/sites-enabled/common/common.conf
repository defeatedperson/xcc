# 统一处理/lua路径的防刷检查（新增）
    location /lua/ {
        access_by_lua_block {
            local anti_brute = require("anti_brute")
            local ip = ngx.var.remote_addr
            local is_banned, remaining = anti_brute.increment_and_check(ip)
            if is_banned then
                ngx.exit(444)
            end
        }
    }

    # 人机验证前端页面（路径调整）
    location = /lua/verification_page.html {
        allow all;  # 允许所有 IP 访问验证页面
        alias /usr/local/openresty/nginx/conf/lua/html/verification_page.html;  # 直接指定文件绝对路径
        try_files $uri =404;  # 确保文件存在时返回，不存在返回404
    }

    # 处理人机验证接口请求（移除重复防刷代码）
    location = /lua/global.lua {
        content_by_lua_block {
            -- 引入 cjson 模块
            local cjson = require("cjson")
    
            -- 接口业务逻辑
            local global = require("global")
            local action = ngx.var.arg_action
            local ip_param = ngx.var.arg_ip
    
            if action == "get_question" then
                local question, err = global.get_verification_question(ip_param)
                if question then
                    ngx.header.content_type = "application/json"
                    ngx.say(cjson.encode(question))
                else
                   ngx.header.content_type = "application/json"
                   ngx.say(cjson.encode({ error = err or "未知错误" }))
                end
            elseif action == "verify" then
                local answer = ngx.var.arg_answer
                local success, msg = global.verify_answer(ip_param, answer)
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode({
                    success = success,
                    msg = msg,
                    url = success and msg or nil
                }))
            else
                ngx.exit(404)
            end
        }
    }
    
#全局计数器验证(判断是否超过设置阈值)
location / {
    content_by_lua_block {
        local counter = require("request_counter")
        local ip_counter = require("ip_counter")
        local remote_addr = ngx.var.remote_addr
        local domain = ngx.var.host  -- 获取当前域名

        -- 关键：调用域名计数方法（恢复请求统计）
        local domain_counter = require("domain_counter")
        domain_counter.increment(domain)  -- 递增请求计数


        -- 新增：检查IP是否被黑IP计数器封禁
        local black_ip_counter = require("black_ip_counter")
        if black_ip_counter.is_banned(remote_addr) then
            ngx.exit(444)  -- 封禁状态返回444
            return
        end

        -- 步骤1: 递增全局和个人计数器（传递域名和IP）
        local global_current, err = counter.increment_global(domain)
        if not global_current then
            return ngx.exit(500)
        end
        
        local custom_current, err = counter.increment_custom(domain, remote_addr)
        if not custom_current then
            return ngx.exit(500)
        end

        -- 步骤2: 检查全局或个人规则是否超过阈值（避免同时触发）
        local is_global_over = counter.check_global_threshold(domain)
        local is_custom_over = counter.check_custom_threshold(domain, remote_addr)
        local is_over = is_global_over or is_custom_over  -- 关键冲突处理：任一超过即触发

        if not is_over then
            ngx.exec("@backend")
            return
        end

        -- 步骤3: 校验IP是否已通过验证（通过则放行）
        local is_ip_valid = ip_counter.check_valid(remote_addr)
        if is_ip_valid then
            ngx.exec("@backend")
            return
        end

        -- 新增：记录验证尝试次数（调用blacklist_counter统计）
        local blacklist_counter = require("blacklist_counter")
        local is_trigger_ban = blacklist_counter.increment_verification(remote_addr, domain)
        if is_trigger_ban then
            ngx.exit(444)  -- 触发封禁后直接返回444
            return
        end

        -- 步骤4: 未验证则跳转验证页面
        local request_url = ngx.var.request_uri
        local global = require("global")
        global.pass_verification_params(remote_addr, request_url, domain)
        ngx.redirect("/lua/verification_page.html?ip=" .. remote_addr)
    }
}