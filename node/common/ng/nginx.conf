user www; 
worker_processes  auto;  # 建议设置为 CPU 核心数（如 4 核 CPU 设为 4），auto 会自动检测但可能需手动限制

events {
    worker_connections  5120;  # 单个工作进程的最大连接数，根据业务需求调整（原 1024 可增大）
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;


    # 共享内存声明（用于请求计数、IP验证等）
    lua_shared_dict request_counter 10m;  # 全局/个人请求计数器（优化后）
    lua_shared_dict ip_verified 10m;       # 存储已验证IP及其有效期
    lua_shared_dict verification_data 1m;  # 验证过程临时数据（如题目、答案）
    lua_shared_dict anti_brute_counter 10m; # 防刷计数器（记录IP请求频率）
    lua_shared_dict blacklist_counter 10m;  # 黑名单统计计数器（记录IP失败次数及时戳）
    lua_shared_dict black_ip_counter 10m;    # 黑IP倒计时计数器（记录IP封禁结束时间）
    lua_shared_dict domain_counter 10m;  #域名请求数日志统计
    lua_shared_dict ban_log_shm 10m;  # 新增：用于封禁日志缓存（大小可根据需求调整）
    lua_shared_dict domain_flow 10m; # 新增：用于存储域名流量统计的共享内存（大小根据业务调整）

    # 新增：引入域名级缓存配置目录（所有域名缓存配置放此目录）
    include /usr/local/openresty/nginx/conf/cachelist/*.conf;
    
    # 缓存键包含域名（保持现有配置，确保不同域名缓存隔离）
    proxy_cache_key "$scheme$host$request_uri";  # 核心：通过$host区分域名

    # Lua模块搜索路径（指向业务Lua代码目录）
    lua_package_path "/usr/local/openresty/nginx/conf/lua/?.lua;;";

    # 初始化Worker进程时启动定时器（关键修改）
    init_worker_by_lua_block {
        local request_counter = require("request_counter")
        local anti_brute = require("anti_brute")  -- 新增：引入防刷模块
        local blacklist_counter = require("blacklist_counter")  -- 新增：引入黑名单统计模块
        local global = require("global")  -- 新增：引入 global 模块
        local domain_counter = require("domain_counter")
        local log = require("log")  -- 新增：引入日志模块
        domain_counter.init()
        domain_counter.start_timer() --域名日志计数器

        -- 仅在第一个Worker进程启动（避免重复执行）
        if ngx.worker.id() == 0 then
            request_counter.init_timers()  -- 原有：启动请求计数器定时器
            anti_brute.init_timers()  -- 新增：启动防刷计数器定时器（需模块实现）
            blacklist_counter.init_timers()  -- 新增：启动黑名单统计定时器（需模块实现）
            -- 新增：启动封禁日志定时写入任务（每分钟执行一次）
            local ok, err = ngx.timer.every(60, function(premature)
                if premature then return end  -- 定时器被提前终止时退出
                log.flush_ban_logs()  -- 调用日志模块的批量写入函数
                end)
        end

        -- 所有Worker进程初始化随机种子（关键修改）
        global.init_random_seed()
    }

    # 定义 UA 白名单变量（放在 http 块顶部）
    map $http_user_agent $ua_whitelisted {
        default 0;  # 默认不允许
        "~*Googlebot|bingbot|BaiduSpider|360Spider" 1;  # 匹配 UA 时允许
    }
    
    # 包含子配置（如域名相关的虚拟主机配置）
    include sites-enabled/*.conf;
}